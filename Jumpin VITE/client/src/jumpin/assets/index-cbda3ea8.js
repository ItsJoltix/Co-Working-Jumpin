var c=Object.defineProperty;var h=(r,e,t)=>e in r?c(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var o=(r,e,t)=>(h(r,typeof e!="symbol"?e+"":e,t),t);class u{constructor(e){o(this,"validators",[]);o(this,"errors",[]);if(!e)throw new Error("Form is undefined");this.form=e,this.form.addEventListener("submit",t=>{this.errors=[],this.validate()&&this.onSubmit(t)})}addValidator(e){this.validators.push({...e,field:this.form.elements[e.name]})}validate(){this.removeInlineError();for(let e=0;e<this.validators.length;e++)if(!this.validators[e].method(this.validators[e].field)){if(this.errors.includes(this.validators[e]))return;this.errors.push(this.validators[e])}return this.showInlineError(),this.errors.length===0}createInlineError(e){const t=document.createElement("span");return t.classList.add("field-error"),t.innerHTML=e.message,t.setAttribute("id",`${e.name}-error`),t}showInlineError(){for(let e=0;e<this.errors.length;e++){const t=this.errors[e],n=this.createInlineError(t),i=t.field;if(i instanceof NodeList){i.forEach(a=>{a.classList.add("invalid"),a.setAttribute("aria-invalid","true"),a.setAttribute("aria-describedby",n.id)});const s=i[0].closest("fieldset");if(s){const a=s.querySelector("legend");a&&a.appendChild(n)}}else{i.classList.add("invalid"),i.setAttribute("aria-invalid","true");const s=document.querySelector(`label[for=${i.id}]`);s&&s.appendChild(n),i.setAttribute("aria-describedby",n.id)}}}removeInlineError(){this.form.querySelectorAll(".field-error").forEach(e=>e.remove()),this.form.querySelectorAll(".invalid").forEach(e=>{e.removeAttribute("aria-invalid"),e.removeAttribute("aria-describedby"),e.classList.remove("invalid")})}onSubmit(e){e.preventDefault(),console.log("Submit gelukt! Geen errors!"),this.removeInlineError();let t=document.querySelector("#name"),n=document.querySelector("#firstname"),i=document.querySelector("#email"),s=document.querySelector("#message"),a=document.querySelector("#score");const m={name:t.value,fname:n.value,email:i.value,message:s.value,score:a.value};fetch("http://localhost:3000/api/v1/reviews",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(m)}).then(l=>l.json()).then(l=>{console.log(l)}).then(()=>{window.location.href="./thankyou"}).catch(l=>{console.error("Error:",l)})}}const d=document.querySelector("#myVerySpecialForm");try{const r=new u(d);r.addValidator({name:"firstname",method:e=>e.value.trim().length>0,message:"Voornaam is een verplicht veld en is niet ingevuld"}),r.addValidator({name:"name",method:e=>e.value.trim().length>0,message:"Naam is een verplicht veld en is niet ingevuld"}),r.addValidator({name:"email",method:e=>e.value.trim().length>0,message:"E-mail is een verplicht veld en is niet ingevuld"}),r.addValidator({name:"message",method:e=>e.value.trim().length>0,message:"Bericht is een verplicht veld en is niet ingevuld"}),r.addValidator({name:"score",method:e=>{const t=parseFloat(e.value.trim());return t>=1&&t<=5},message:"Score is een verplicht veld en moet tussen de 1 en 5 liggen"}),r.addValidator({name:"privacy",method:e=>e.checked,message:"Privacy agreement is een verplicht veld en is niet ingevuld"}),d.addEventListener("submit",function(e){e.preventDefault()})}catch(r){console.log(r)}
